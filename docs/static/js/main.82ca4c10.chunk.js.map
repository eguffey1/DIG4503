{"version":3,"sources":["App.js","serviceWorker.js","index.js","index.module.css"],"names":["App","search","nameSearch","myRef","current","value","fetch","then","data","json","error","setState","hasError","results","React","createRef","state","src","alt","className","ref","this","type","placeholder","id","onKeyUp","styles","input","map","character","key","image","name","created","status","species","class","gender","origin","location","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message","module","exports"],"mappings":"qOAKqBA,E,kDACpB,aAAe,IAAD,8BACb,gBAQDC,OAAS,WACN,IAAIC,EAAa,EAAKC,MAAMC,QAAQC,MACtCC,MAAM,mDAAD,OAAoDJ,IACvDK,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UACfF,MAAK,SAACC,GACFA,EAAKE,MACJ,EAAKC,SAAS,CAAEC,UAAU,IAE5B,EAAKD,SAAS,CAACH,KAAMA,EAAKK,QAASD,UAAU,QAfnD,EAAKT,MAAQW,IAAMC,YACnB,EAAKC,MAAQ,CACXR,KAAM,GACNI,UAAU,GALD,E,qDAwBT,OACE,6BACA,6BACI,yBAAKK,IAAI,yEAAyEC,IAAI,iBAAiBC,UAAU,cACjH,uBAAGA,UAAU,6CAA+C,2BAAOC,IAAKC,KAAKlB,MAAOmB,KAAK,OAAOC,YAAY,uBAAuBC,GAAG,SAASC,QAASJ,KAAKpB,OAAQkB,UAAWO,IAAOC,QACvL,uBAAGR,UAAU,eAAb,4BACA,6BACEE,KAAKL,MAAMJ,SAAY,4HACvBS,KAAKL,MAAMR,KAAKoB,KAAI,SAAAC,GAC3B,OACC,yBAAKV,UAAU,WAAWW,IAAKD,EAAUL,IAC/B,yBAAKL,UAAU,cACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,kBACb,yBAAKF,IAAKY,EAAUE,MAAOb,IAAKW,EAAUG,KAAMb,UAAU,8BAC5D,yBAAKA,UAAU,cACb,wBAAIA,UAAU,oCAAoCU,EAAUG,MAC5D,uBAAGb,UAAU,8BAA6B,wCAAsBU,EAAUL,IAAO,uBAAGL,UAAU,6BAA6BK,GAAG,aAAY,4CAAzD,IAAoFK,EAAUI,WAGjL,yBAAKd,UAAU,4BACb,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,qBACf,+BACE,4BACI,wBAAIA,UAAU,iCAAgC,2CAC9C,wBAAIA,UAAU,kBAAkBU,EAAUK,SAE9C,4BACI,wBAAIf,UAAU,iCAAgC,4CAC9C,wBAAIA,UAAU,kBAAkBU,EAAUM,UAE9C,4BACI,wBAAIhB,UAAU,iCAAgC,2CAC9C,wBAAIiB,MAAM,kBAAkBP,EAAUQ,SAE1C,4BACI,wBAAIlB,UAAU,iCAAgC,2CAC9C,wBAAIA,UAAU,kBAAkBU,EAAUS,OAAON,OAErD,4BACI,wBAAIb,UAAU,iCAAgC,kDAC9C,wBAAIA,UAAU,kBAAkBU,EAAUU,SAASP,uB,GAnEpDlB,IAAM0B,WCOnBC,QACW,cAA7BC,OAAOH,SAASI,UAEe,UAA7BD,OAAOH,SAASI,UAEhBD,OAAOH,SAASI,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACDC,SAASC,eAAe,SD2HrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,a,kBExI5BC,EAAOC,QAAU,CAAC,MAAQ,mBAAmB,KAAO,oB","file":"static/js/main.82ca4c10.chunk.js","sourcesContent":["import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport styles from \"./index.module.css\";\n\nexport default class App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n    this.myRef = React.createRef();\n    this.state = { \n      data: [],\n      hasError: false\n    }\n  }  \n\n\tsearch = () => {\n    let nameSearch = this.myRef.current.value;\n\t\tfetch(`https://rickandmortyapi.com/api/character/?name=${nameSearch}`) \n\t\t\t.then(data => data.json()) \n      .then((data) => {\n        if(data.error) {\n            this.setState({ hasError: true })\n        } else {\n          this.setState({data: data.results, hasError: false})\n        }\n      })\n    }\n    \n    //Below Rick and Morty Image - By Source (WP:NFCC#4), Fair use, https://en.wikipedia.org/w/index.php?curid=53588037\n    render() {\n      return (\n        <div>\n        <div>\n            <img src=\"https://upload.wikimedia.org/wikipedia/en/c/c8/Rick_and_Morty_logo.png\" alt=\"Rick and Morty\" className=\"img-fluid\"/> \n            <i className=\"fa fa-search-plus ml-5 mr-1 text-primary\"></i><input ref={this.myRef} type=\"text\" placeholder=\"Enter Character Name\" id=\"Search\" onKeyUp={this.search} className={styles.input}/>\n            <p className=\"text-center\">(limit 20 results/query)</p>\n            <hr/>\n            {(this.state.hasError) ? <p>No results - Try Rick, Morty, Summer, Beth, Jerry or look up other Rick and Morty Characters!</p> \n            : this.state.data.map(character => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className=\"col-lg-3\" key={character.id}>\n                  <div className=\"card-group\">\n                    <div className=\"card\">\n                      <div className=\"card-image-crc\">\n                        <img src={character.image} alt={character.name} className=\"img-fluid rep-image w-100\" />\n                      <div className=\"header-top\">\n                        <h2 className=\"title-card-carc text-center mt-1\">{character.name}</h2>\n                        <p className=\"card-para-carc text-center\"><strong>ID: </strong>{character.id}</p><p className=\"card-para-carc text-center\" id=\"time-carc\"><strong>Created:</strong> {character.created}</p>\n                      </div>\n                      </div>\n                      <div className=\"card-body card-body-carc\">\n                        <div className=\"table-responsive\">\n                          <table className=\"table text-center\">\n                            <tbody>\n                              <tr>\n                                  <td className=\"first-crc-stat table-text-crc\"><strong>Status</strong></td>\n                                  <td className=\"table-text-crc\">{character.status}</td>\n                              </tr>\n                              <tr>\n                                  <td className=\"first-crc-stat table-text-crc\"><strong>Species</strong></td>\n                                  <td className=\"table-text-crc\">{character.species}</td>\n                              </tr>\n                              <tr>\n                                  <td className=\"first-crc-stat table-text-crc\"><strong>Gender</strong></td>\n                                  <td class=\"table-text-crc\">{character.gender}</td>\n                              </tr>\n                              <tr>\n                                  <td className=\"first-crc-stat table-text-crc\"><strong>Origin</strong></td>\n                                  <td className=\"table-text-crc\">{character.origin.name}</td>\n                              </tr>\n                              <tr>\n                                  <td className=\"first-crc-stat table-text-crc\"><strong>Last Location</strong></td>\n                                  <td className=\"table-text-crc\">{character.location.name}</td>\n                              </tr>\n                            </tbody>\n                          </table>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\t\t\t          )\n\t\t        })}\t\n          </div>\t\t\n        </div>\n\t\t  )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"src_input__1lYPP\",\"icon\":\"src_icon__3LCZ6\"};"],"sourceRoot":""}